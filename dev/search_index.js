var documenterSearchIndex = {"docs":
[{"location":"metrics/#Metrics","page":"Metrics","title":"Metrics","text":"","category":"section"},{"location":"metrics/","page":"Metrics","title":"Metrics","text":"This section provides general metrics that are not specific to a particular group or life stage.","category":"page"},{"location":"metrics/#ADRIAIndicators._colony_Lcm2_to_m3m2-Union{Tuple{T}, Tuple{T, T, T}} where T<:AbstractFloat","page":"Metrics","title":"ADRIAIndicators._colony_Lcm2_to_m3m2","text":"_colony_Lcm2_to_m3m2(colony_mean_diams_cm::Array{T,2}, colony_)::Tuple\n\nHelper function to convert coral colony values from Litres/cm² to m³/m²\n\nArguments\n\ncolony_mean_diams_cm : Matrix of mean colony diameters\nplanar_area_int : planar area model intercept\nplanar_area_coef : planar area model coefficient\n\nReturns\n\nTuple : Assumed colony volume (m³/m²) for each species/size class\n\nReferences\n\nAston Eoghan A., Duce Stephanie, Hoey Andrew S., Ferrari Renata (2022).  A Protocol for Extracting Structural Metrics From 3D Reconstructions of Corals.  Frontiers in Marine Science, 9.  https://doi.org/10.3389/fmars.2022.854395\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators._dimension_mismatch_message-Tuple{String, String, Tuple, Tuple}","page":"Metrics","title":"ADRIAIndicators._dimension_mismatch_message","text":"_dimension_mismatch_message(array_name_1::String, array_name_2::String, dims1::Tuple, dims2::Tuple)::String\n\nConstruct an informative error message when a discrepancy between array dimensions is detected.\n\nArguments\n\narray_name_1 : Name of the first array.\narray_name_2 : Name of the second array.\ndims1 : Shape of the first array.\ndims2 : Shape of the second array.\n\nReturns\n\nString containing an informative error message.\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.absolute_shelter_volume!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractMatrix{T}, AbstractArray{T, 3}, AbstractVector{T}, AbstractArray{T, 4}}} where T<:AbstractFloat","page":"Metrics","title":"ADRIAIndicators.absolute_shelter_volume!","text":"absolute_shelter_volume!(rel_cover::AbstractArray{T,3}, colony_mean_diam_cm::AbstractArray{T,2}, planar_area_params::AbstractArray{T,3}, habitable_area::T, ASV::AbstractArray{T,3})::Nothing where {T<:AbstractFloat}\n\nArguments\n\nrel_cover : 4-D Array of relative coral cover with dimensions [timesteps ⋅ groups ⋅ size ⋅ locations]\ncolony_mean_diam_cm : Matrix of mean colony diameter with dimensions [groups ⋅ size]\nplanar_area_params : 3-D array of planar area parameters with dimensions [groups ⋅ size ⋅ (intercept, coefficient)]\nhabitable_area_m2 : Vector of habitable area for each location [locations]\nout_ASV : Output array buffer for absolute shelter volume [timesteps ⋅ groups ⋅ size ⋅ locations]\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.absolute_shelter_volume-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractMatrix{T}, AbstractArray{T, 3}, AbstractVector{T}}} where T<:AbstractFloat","page":"Metrics","title":"ADRIAIndicators.absolute_shelter_volume","text":"absolute_shelter_volume(rel_cover::AbstractArray{T,4}, colony_mean_area_cm::AbstractArray{T,2}, planar_area_params::AbstractArray{T,3}, habitable_area::AbstractVector{T})::AbstractArray{T,4} where {T<:AbstractFloat}\n\nCalculate the volume of shelter provided by the given coral cover. This function uses log-log linear models to predict the volume of shelter provided from a given planar area. The parametrisation of this log-log linear model must be provided by the user. The log-log linear model is given by\n\nbeginalign*\n    log(S) = b + alog(PA)\nendalign*\n\nwhere S and PA are shelter volume (m^3m_-2) and planar area, respectively. Then absolute shelter volume is given by\n\nbeginalign*\n    ASV = A_C cdot S\nendalign*\n\nwhere ASV and A_C refers to absolute shelter volume and absolute coral cover, respectively.\n\nArguments\n\nrel_cover : 4-D Array of relative coral cover with dimensions [timesteps ⋅ groups ⋅ size ⋅ locations]\ncolony_mean_area_cm : Matrix of mean colony diameter with dimensions [groups ⋅ size]\nplanar_area_params : 3-D array of planar area params with dimensions [groups ⋅ size ⋅ (intercept, coefficient)]\nhabitable_area_m2 : Vector of habitable area for each location [locations]\n\nReturns\n\nOutput array containing absolute shelter volume [timesteps ⋅ groups ⋅ size ⋅ locations]\n\nReferences\n\nUrbina-Barreto, I., Chiroleu, F., Pinel, R., Fréchon, L., Mahamadaly, V.,   Elise, S., Kulbicki, M., Quod, J.-P., Dutrieux, E., Garnier, R.,   Henrich Bruggemann, J., Penin, L., & Adjeroud, M. (2021). Quantifying the shelter capacity of coral reefs using photogrammetric   3D modeling: From colonies to reefscapes. Ecological Indicators, 121, 107151. https://doi.org/10.1016/j.ecolind.2020.107151\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.coral_diversity!-Union{Tuple{T}, Tuple{Array{T, 3}, Matrix{T}}} where T<:Real","page":"Metrics","title":"ADRIAIndicators.coral_diversity!","text":"coral_diversity(r_taxa_cover::Array{T, 3}, out_coral_diversity::Array{T,2})::Nothing where {T<:Real}\n\nCalculates coral taxa diversity as a dimensionless metric.\n\nArguments\n\nrel_cover : Relative Taxa Cover of dimensions [timesteps ⋅ groups ⋅ locations]\nout_coral_diversity : Output array buffer [timesteps ⋅ locations]\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.coral_diversity-Union{Tuple{Array{T, 3}}, Tuple{T}} where T<:Real","page":"Metrics","title":"ADRIAIndicators.coral_diversity","text":"coral_diversity(rel_cover::Array{T, 3})::Array{T,2} where {T<:Real}\n\nCalculates coral taxa diversity as a dimensionless metric. Derived from the Simpson's Diversity Index.\n\nFormulated as part of a reef condition index by Dr Mike Williams (mjmcwilliam@outlook.com) and Dr Morgan Pratchett (morgan.pratchett@jcu.edu.au).\n\nThe coral diversity metric (D) for a given location and timestep is given as\n\nbeginalign*\nD(x) = 1 - sum_g=1^G (fracx_gx_T)^2\nendalign*\n\nwhere x_g is the relative coral cover for the functional group, g, and x_T is total relative coral cover at the given location and timestep.\n\nArguments\n\nrel_cover : Relative Taxa Cover of dimensions [timesteps ⋅ groups ⋅ locations]\n\nReturns\n\nMatrix containing coral diversity metric of dimension [timesteps ⋅ locations]\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.coral_evenness!-Union{Tuple{T}, Tuple{AbstractArray{T, 3}, Matrix{T}}} where T<:Real","page":"Metrics","title":"ADRIAIndicators.coral_evenness!","text":"coral_evenness!(r_taxa_cover::AbstractArray{T,3}, out_coral_evenness::Array{T,2})::Nothing where {T<:Real}\n\nCalculates evenness across functional coral groups in ADRIA as a diversity metric. Inverse Simpsons diversity indicator.\n\nArguments\n\nrel_cover : Relative Taxa Cover of dimensions [timesteps ⋅ groups ⋅ locations]\nout_coral_evenness : Output array buffer [timesteps ⋅ locations]\n\nReferences\n\nHill, M. O. (1973).\n\nDiversity and Evenness: A Unifying Notation and Its Consequences. Ecology, 54(2), 427-432. https://doi.org/10.2307/1934352\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.coral_evenness-Union{Tuple{Array{T, 3}}, Tuple{T}} where T<:Real","page":"Metrics","title":"ADRIAIndicators.coral_evenness","text":"coral_evenness(r_taxa_cover::AbstractArray{T})::AbstractArray{T} where {T<:Real}\n\nCalculates evenness across functional coral groups in ADRIA as a diversity metric. Inverse Simpsons diversity indicator.\n\nThe coral evenness metric (E) is given as follows,\n\nbeginalign*\nE(x) = left(sum_g=1^Gleft(fracx_gx_T right)^2right)^-1\nendalign*\n\nArguments\n\nrel_cover : Relative Taxa Cover of dimensions [timesteps ⋅ groups ⋅ locations]\n\nReturns\n\nMatrix containing coral evenness metric of dimensions [timesteps ⋅ locations]\n\nReferences\n\nHill, M. O. (1973).\n\nDiversity and Evenness: A Unifying Notation and Its Consequences. Ecology, 54(2), 427-432. https://doi.org/10.2307/1934352\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.relative_shelter_volume!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractMatrix{T}, AbstractArray{T, 3}, AbstractVector{T}, AbstractArray{T, 4}}} where T<:AbstractFloat","page":"Metrics","title":"ADRIAIndicators.relative_shelter_volume!","text":"relative_shelter_volume!(rel_cover::AbstractArray{T,4}, colony_mean_diam_cm::AbstractArray{T,2}, planar_area_params::AbstractArray{T,3}, habitable_area_m²::AbstractVector{T}, out_RSV::AbstractArray{T,4})::Nothing where {T<:AbstractFloat}\n\nCalculate the relative shelter volume for a range of covers. Relative to the theoretical maximum of 50% cover of a coral species with the largest colony volume. Relative shelter volume (RSV) is given by\n\nbeginalign*\n    textRSV(x) = \fracASV(x)MSV(x)\nendalign*\n\nwhere ASV and MSV are Absolute Shelter Volume and Maximum Shelter Volume respectively.\n\nArguments\n\nrel_cover : Relative Cover array with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\ncolony_mean_diam_cm : Mean colony diameter per group and size class with dimensions [groups ⋅ sizes].\nplanar_area_params : Array containing the planar area parameters with dimensions [groups ⋅ sizes ⋅ (intercept, coefficient)].\nhabitable_area_m² : Habitable area in m² with dimensions [locations].\nout_RSV : Output Relative shelter volume array buffer with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.relative_shelter_volume-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractMatrix{T}, AbstractArray{T, 3}, AbstractVector{T}}} where T<:Real","page":"Metrics","title":"ADRIAIndicators.relative_shelter_volume","text":"relative_shelter_volume(relative_cover::AbstractArray{T,4}, colony_mean_diam_cm::AbstractArray{T,2}, planar_area_params::AbstractArray{T,3}, habitable_area_m²::AbstractVector{T})::AbstractArray{T,4} where {T<:Real}\n\nCalculate the relative shelter volume for a range of covers. Relative shelter volume (RSV) is given by\n\nbeginalign*\n    textRSV(x) = fracASV(x)MSV(x)\nendalign*\n\nwhere ASV and MSV are Absolute Shelter Volume and Maximum Shelter Volume respectively. Previously, the maximum shelter volume has been defined by assuming the maximum theoretical shelter volume produced by the largest size class of Tabular Acropora. This function defines it by calculating the shelter volume for each functional group and size class and picking the maximum.\n\nArguments\n\nrel_cover : Relative Cover array with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\ncolony_mean_diam_cm : Mean colony area per group and size class with dimensions [groups ⋅ sizes].\nplanar_area_params : Array containing the planar area parameters with dimensions [groups ⋅ sizes ⋅ (intercept, coefficient)].\nhabitable_area_m² : Habitable area in m² with dimensions [locations].\n\nReturns\n\nRelative shelter volume in an array with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations]\n\nReferences\n\nUrbina-Barreto, I., Chiroleu, F., Pinel, R., Fréchon, L., Mahamadaly, V.,   Elise, S., Kulbicki, M., Quod, J.-P., Dutrieux, E., Garnier, R.,   Henrich Bruggemann, J., Penin, L., & Adjeroud, M. (2021). Quantifying the shelter capacity of coral reefs using photogrammetric   3D modeling: From colonies to reefscapes. Ecological Indicators, 121, 107151. https://doi.org/10.1016/j.ecolind.2020.107151\n\n\n\n\n\n","category":"method"},{"location":"metrics/#ADRIAIndicators.scenario_metric-Union{Tuple{T}, Tuple{AbstractArray{T}, AbstractVector{T}, Int64}} where T<:AbstractFloat","page":"Metrics","title":"ADRIAIndicators.scenario_metric","text":"scenario_metric(metric::AbstractArray{T}, location_area::AbstractVector{T}, location_dim::Int; is_relative::Bool=true, return_relative::Bool=true)::AbstractArray{T} where {T<:AbstractFloat}\n\nAggregate a metric across the location dimension.\n\nThis function can take a metric that is either relative to location area or absolute, and can return a metric that is either relative to the total area or absolute.\n\nArguments\n\nmetric : An array containing the metric to aggregate.\nlocation_area : A vector of area values for each location.\nlocation_dim : The dimension of the metric array that corresponds to location.\nis_relative : Whether the input metric is relative to location area. Defaults to true.\nreturn_relative : Whether the output should be relative to total area. Defaults to true.\n\nReturns\n\nAn array with the location dimension removed, containing the aggregated metric.\n\n\n\n\n\n","category":"method"},{"location":"indices/#Reef-Indices","page":"Reef Indices","title":"Reef Indices","text":"","category":"section"},{"location":"indices/","page":"Reef Indices","title":"Reef Indices","text":"This section provides high-level reef indices. These indices combine multiple metrics to provide a summary of reef state for different purposes.","category":"page"},{"location":"indices/#ADRIAIndicators.reef_biodiversity_condition_index!-Union{Tuple{T}, NTuple{4, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Reef Indices","title":"ADRIAIndicators.reef_biodiversity_condition_index!","text":"reef_biodiversity_condition_index!(rc::AbstractArray{T,2}, cd::AbstractArray{T,2}, sv::AbstractArray{T,2}, out_rbci::AbstractArray{T,2})::Nothing where {T<:AbstractFloat}\n\nCalculate the Reef Biodiversity Condition Index (RBCI).\n\nArguments\n\nrc : Relative coral cover.\ncd : Coral diversity.\nsv : Relative shelter volume.\nout_rbci : Output array buffer for the RCI.\n\n\n\n\n\n","category":"method"},{"location":"indices/#ADRIAIndicators.reef_biodiversity_condition_index-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Reef Indices","title":"ADRIAIndicators.reef_biodiversity_condition_index","text":"reef_biodiversity_condition_index(relative_cover::AbstractArray{T,2}, coral_diversity::AbstractArray{T,2}, shelter_volume::AbstractArray{T,2})::AbstractArray{T,2} where {T<:AbstractFloat}\n\nCalculate the Reef Biodiversity Condition Index (RBCI). The RBCI is simply the average of relative cover (RC), coral diversity (CD), and shelter volume (SV). Given as\n\nbeginalign*\ntextRBCI = fractextRC + textCD + textSV3\nendalign*\n\nArguments\n\nrelative_cover : Relative coral cover.\ncoral_diversity : Coral diversity.\nshelter_volume : Relative shelter volume.\n\nReturns\n\nA 2D array of the Reef Condition Index.\n\n\n\n\n\n","category":"method"},{"location":"indices/#ADRIAIndicators.reef_condition_index!-Union{Tuple{T}, NTuple{6, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Reef Indices","title":"ADRIAIndicators.reef_condition_index!","text":"reef_condition_index!(relative_cover::AbstractArray{T,2}, relative_shelter_volume::AbstractArray{T,2}, relative_juveniles::AbstractArray{T,2}, cots::AbstractArray{T,2}, rubble::AbstractArray{T,2}, out_rci::AbstractArray{T,2})::Nothing where {T<:AbstractFloat}\n\nCalculate the Reef Condition Index (RCI).\n\nArguments\n\nrelative_cover : Relative Coral Cover with dimensions [timesteps ⋅ locations].\nrelative_shelter_volume : Relative shelter volume with dimensions [timesteps ⋅ locations].\nrelative_juveniles: Relative juvenile cover with dimensions [timesteps ⋅ locations].\ncots : Abundance of crown of the starfish with dimensions [timesteps ⋅ locations].\nrubble : Relative rubble cover with dimensions [timesteps ⋅ locations].\nout_rci : Output RCI buffer with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"indices/#ADRIAIndicators.reef_condition_index-Union{Tuple{T}, NTuple{5, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Reef Indices","title":"ADRIAIndicators.reef_condition_index","text":"reef_condition_index(relative_cover::AbstractArray{T,2}, shelter_volume::AbstractArray{T,2}, relative_juveniles::AbstractArray{T,2}, cots::AbstractArray{T,2}, rubble::AbstractArray{T,2})::AbstractArray{T,2} where {T<:AbstractFloat}\n\nCalculate the Reef Condition Index (RCI).\n\nThe RCI is a categorical index assessing the overall health and condition of a reef location based on five key ecological metrics. The index assigns a discrete score (0.1, 0.3, 0.5, 0.7, or 0.9) representing categories from \"Very Poor\" to \"Very Good\".\n\nThe RCI accepts five inputs\n\nRelative Coral Cover\nRelative Shelter Volume\nRelative Juvenile Cover\nCrown-of-Thorns Starfish (COTS) abundance\nRubble cover\n\nFor each input there are five levels of condition ranging from very poor to very good. COTS and Rubble Cover is inverted, where high values indicate worse condition. Then the location is assigned a condition of very poor to very good if that location meets 60% of the metrics condition criteria. The condition level is then assigned a numerical value based on its categorisation\n\n0.9: Very Good 0.7: Good 0.5: Fair 0.3: Poor 0.1: Very Poor\n\nArguments\n\nrelative_cover : Relative Coral Cover with dimensions [timesteps ⋅ locations].\nrelative_shelter_volume : Relative shelter volume with dimensions [timesteps ⋅ locations].\nrelative_juveniles: Relative juvenile cover with dimensions [timesteps ⋅ locations].\ncots : Abundance of crown of the starfish with dimensions [timesteps ⋅ locations].\nrubble : Relative rubble cover with dimensions [timesteps ⋅ locations].\n\nReturns\n\nOutput RCI buffer with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"indices/#ADRIAIndicators.reef_fish_index!-Union{Tuple{T}, Tuple{AbstractMatrix{T}, AbstractMatrix{T}}} where T<:Real","page":"Reef Indices","title":"ADRIAIndicators.reef_fish_index!","text":"reef_fish_index!(rc::AbstractArray, out_rfi::AbstractArray)::Nothing\n\nCalculate the Reef Fish Index (RFI) for a single scenario.\n\nArguments\n\nrc : Relative coral cover with dimensions [timesteps ⋅ locations].\nout_rfi : Output array buffer for the RFI with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"indices/#ADRIAIndicators.reef_fish_index-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T<:Real","page":"Reef Indices","title":"ADRIAIndicators.reef_fish_index","text":"reef_fish_index(relative_cover::AbstractArray{T,2},)::AbstractArray{T,2} where {T<:Real}\n\nCalculate the Reef Fish Index (RFI) for a single scenario. The RFI is composed of two linear regressions mapping relative coral cover to structural complexity and finally, structural complexity to fish biomass. The index is based off figure 4a and 6b in Graham et al., 2013 [1]. RFI (kg/km²) as a functional of relative cover (x) is given as\n\nbeginalign*\ntextSC(x) = 1232 + 0007476  x  100\ntextRFI = 001  (-16236 + 18833  SC)\nendalign*\n\nwhere SC is the structural complexity of the location.\n\nArguments\n\nrelative_cover : Relative coral cover with dimensions [timesteps ⋅ locations].\n\nReturns\n\nA 2D array of the Reef Fish Index with dimensions [timesteps ⋅ locations].\n\nReferences\n\nGraham, N.A.J., Nash, K.L. The importance of structural complexity in coral reef  ecosystems. Coral Reefs 32, 315–326 (2013). https://doi.org/10.1007/s00338-012-0984-y\n\n\n\n\n\n","category":"method"},{"location":"indices/#ADRIAIndicators.reef_tourism_index!-Union{Tuple{T}, NTuple{6, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Reef Indices","title":"ADRIAIndicators.reef_tourism_index!","text":"reef_tourism_index!(relative_cover::AbstractArray{T,2}, shelter_volume::AbstractArray{T,2}, relative_juveniles::AbstractArray{T,2}, cots::AbstractArray{T,2}, rubble::AbstractArray{T,2}, out_rti::AbstractArray{T,2})::Nothing where {T<:AbstractFloat}\n\nCalculate the Reef Tourism Index (RTI) for a single scenario.\n\nArguments\n\nrelative_cover : Relative coral cover with dimensions [timesteps ⋅ locations].\nshelter_volume : Relative shelter volume with dimensions [timesteps ⋅ locations].\nrelative_juveniles : Relative juvenile cover with dimensions [timesteps ⋅ locations].\ncots : COTS abundance as a count with dimensions [timesteps ⋅ locations].\nrubble : Rubble as a proportion of location area with dimensions [timesteps ⋅ locations].\nout_rti : Output array buffer for the RTI with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"indices/#ADRIAIndicators.reef_tourism_index-Union{Tuple{T}, NTuple{5, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Reef Indices","title":"ADRIAIndicators.reef_tourism_index","text":"reef_tourism_index(relative_cover::AbstractArray{T,2}, shelter_volume::AbstractArray{T,2}, relative_juveniles::AbstractArray{T,2}, cots::AbstractArray{T,2}, rubble::AbstractArray{T,2})::AbstractArray{T,2} where {T<:AbstractFloat}\n\nCalculate the Reef Tourism Index (RTI) for a single scenario. The RTI is the Reef Condition Index made continuous by fitting a linear regression model using relative cover, shelter volume, relative juveniles, cots abundance and rubble to underpin it.\n\nArguments\n\nrelative_cover : Relative coral cover with dimensions [timesteps ⋅ locations].\nshelter_volume : Relative shelter volume with dimensions [timesteps ⋅ locations].\nrelative_juveniles : Relative juvenile cover with dimensions [timesteps ⋅ locations].\ncots : COTS abundance with dimensions [timesteps ⋅ locations].\nrubble : Rubble as proportion of location area with dimensions [timesteps ⋅ locations].\n\nReturns\n\nA 2D array of the Reef Tourism Index with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"cover_metrics/#Cover-Metrics","page":"Cover Metrics","title":"Cover Metrics","text":"","category":"section"},{"location":"cover_metrics/","page":"Cover Metrics","title":"Cover Metrics","text":"This section provides metrics related to coral cover. These metrics calculate coral cover at different spatial scales and for different taxonomic groups.","category":"page"},{"location":"cover_metrics/#ADRIAIndicators.relative_cover!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractMatrix{T}}} where T<:Real","page":"Cover Metrics","title":"ADRIAIndicators.relative_cover!","text":"relative_cover!(relative_cover::AbstractArray{T,4}, out_relative_cover::AbstractArray{T,2})::Nothing where {T<:Real}\n\nCalculate the relative cover per location by summing over groups and size classes.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nout_relative_cover : Output array buffer for relative cover with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"cover_metrics/#ADRIAIndicators.relative_cover-Union{Tuple{AbstractArray{T, 4}}, Tuple{T}} where T<:Real","page":"Cover Metrics","title":"ADRIAIndicators.relative_cover","text":"relative_cover(relative_cover::AbstractArray{T,4})::AbstractArray{T,2} where {T<:Real}\n\nCalculate the relative cover per location by summing over groups and size classes.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\n\nReturns\n\nA 2D array of relative cover with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"cover_metrics/#ADRIAIndicators.relative_loc_taxa_cover!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractArray{T, 3}}} where T<:Real","page":"Cover Metrics","title":"ADRIAIndicators.relative_loc_taxa_cover!","text":"relative_loc_taxa_cover!(relative_cover::AbstractArray{T,4}, out_relative_loc_taxa_cover::AbstractArray{T,3})::Nothing where {T<:Real}\n\nCalculate the relative taxa cover for each location.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nout_relative_loc_taxa_cover : Output array buffer with dimensions [timesteps ⋅ groups ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"cover_metrics/#ADRIAIndicators.relative_loc_taxa_cover-Union{Tuple{AbstractArray{T, 4}}, Tuple{T}} where T<:Real","page":"Cover Metrics","title":"ADRIAIndicators.relative_loc_taxa_cover","text":"relative_loc_taxa_cover(relative_cover::AbstractArray{T,4})::AbstractArray{T,3} where {T<:Real}\n\nCalculate the relative taxa cover for each location.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\n\nReturns\n\nA 3D array of relative taxa cover with dimensions [timesteps ⋅ groups ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"cover_metrics/#ADRIAIndicators.relative_taxa_cover!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{T}, AbstractMatrix{T}}} where T<:Real","page":"Cover Metrics","title":"ADRIAIndicators.relative_taxa_cover!","text":"relative_taxa_cover!(relative_cover::AbstractArray{T,4}, location_area::AbstractVector{T}, out_relative_taxa_cover::AbstractArray{T,2})::Nothing where {T<:Real}\n\nCalculate the relative taxa cover, summed up across all locations.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nlocation_area : The coral habitable area for each location.\nout_relative_taxa_cover : Output array buffer with dimensions [timesteps ⋅ groups].\n\n\n\n\n\n","category":"method"},{"location":"cover_metrics/#ADRIAIndicators.relative_taxa_cover-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{T}}} where T<:Real","page":"Cover Metrics","title":"ADRIAIndicators.relative_taxa_cover","text":"relative_taxa_cover(relative_cover::AbstractArray{T,4}, location_area::AbstractVector{T})::AbstractArray{T,2} where {T<:Real}\n\nCalculate the relative taxa cover, summed up across all locations.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nlocation_area : The coral habitable area for each location.\n\nReturns\n\nA 2D array of relative taxa cover with dimensions [timesteps ⋅ groups].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#Juvenile-Metrics","page":"Juvenile Metrics","title":"Juvenile Metrics","text":"","category":"section"},{"location":"juvenile_metrics/","page":"Juvenile Metrics","title":"Juvenile Metrics","text":"This section provides metrics related to juvenile corals. These metrics are used to assess the state of juvenile coral populations from different perspectives.","category":"page"},{"location":"juvenile_metrics/#ADRIAIndicators._max_juvenile_area-Union{Tuple{T}, Tuple{T, T}} where T<:Real","page":"Juvenile Metrics","title":"ADRIAIndicators._max_juvenile_area","text":"_max_juvenile_area(max_juv_colony_area::T, max_juv_density::T)::T where {T<:Real}\n\nCalculate the maximum possible area that can be covered by juveniles for a given m².\n\nArguments\n\nmax_juv_colony_area : Maximum colony area of a juvenile in m².\nmax_juv_density : Maximum juvenile density in individuals/m².\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators._maximum_colony_area-Union{Tuple{AbstractMatrix{T}}, Tuple{T}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators._maximum_colony_area","text":"_maximum_colony_area(size_spec::AbstractArray{T,2})::T where {T<:AbstractFloat}\n\nCalculate the largest colony size given a range of size classes.\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.absolute_juveniles!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.absolute_juveniles!","text":"absolute_juveniles!(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, location_area::AbstractVector{T}, out_absolute_juveniles::AbstractArray{T,2})::Nothing where {T<:AbstractFloat}\n\nCalculate the absolute coral cover composed of juveniles for each timestep and location.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : A boolean vector indicating which size classes are juvenile.\nlocation_area : Habitable area for each location.\nout_absolute_juveniles : Output array buffer with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.absolute_juveniles-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.absolute_juveniles","text":"absolute_juveniles(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, location_area::AbstractVector{T})::AbstractArray{T,2} where {T<:AbstractFloat}\n\nCalculate the absolute coral cover composed of juveniles for each timestep and location.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : Boolean mask indicating juvenile size classes.\nlocation_area : Habitable area for each location.\n\nReturns\n\nA 2D array of absolute juvenile cover with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.absolute_loc_taxa_juveniles!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}, AbstractArray{T, 3}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.absolute_loc_taxa_juveniles!","text":"absolute_loc_taxa_juveniles!(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, location_area::AbstractVector{T}, out_absolute_loc_taxa_juveniles::AbstractArray{T,3})::Nothing\n\nCalculate the coral cover occupied by juveniles in absolute units over timesteps, functional groups and locations. Write results into a preallocated buffer.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : Boolean mask indicating juvenile size classes.\nlocation_area : Habitable area for each location.\nout_absolute_loc_taxa_juveniles : Out array buffer with dimensions [timesteps ⋅ groups ⋅ locations]\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.absolute_loc_taxa_juveniles-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.absolute_loc_taxa_juveniles","text":"absolute_loc_taxa_juveniles(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, location_area::AbstractVector{T})::Array{T,3} where {T<:AbstractFloat}\n\nCalculate the coral cover occupied by juveniles in absolute units over timesteps, functional groups and locations.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : Boolean mask indicating juvenile size classes.\nlocation_area : Habitable area for each location.\n\nReturns\n\nA 2D array of absolute juvenile cover with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.absolute_taxa_juveniles!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.absolute_taxa_juveniles!","text":"absolute_taxa_juveniles!(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, location_area::AbstractVector{T}, out_absolute_taxa_juveniles::AbstractArray{T,2})::Nothing\n\nCalculate the coral cover occupied by juveniles over timesteps and functional groups. Write results in a preallocated buffer.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : Boolean mask indicating juvenile size classes.\nlocation_area : Habitable area for each location.\nout_absolute_taxa_juveniles : Out array buffer with dimensions [timesteps ⋅ groups ⋅ locations]\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.absolute_taxa_juveniles-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.absolute_taxa_juveniles","text":"absolute_taxa_juveniles(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, location_area::AbstractVector{T})::Array{T,2} where {T<:AbstractFloat}\n\nCalculate the coral cover occupied by juveniles in absolute units over timesteps, functional groups and locations.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : Boolean mask indicating juvenile size classes.\nlocation_area : Habitable area for each location.\n\nReturns\n\nA 2D array with dimensions [timesteps ⋅ groups]\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.juvenile_indicator!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}, AbstractMatrix{T}, T, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.juvenile_indicator!","text":"juvenile_indicator!(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, location_area::AbstractVector{T}, max_juv_colony_area::T, max_juv_density::T)::Nothing\n\nIndicator for juvenile density (0 - 1) where 1 indicates the maximum theoretical density for juveniles have been achieved.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations]\nis_juvenile : Boolean mask indicating juvenile size classes.\nhabitable_area : Available area habitable by coral for each location.\nmean_colony_diameters : Mean colony diameter for each group and size class with dimensions [groups ⋅ size classes]\nmax_juv_density : Maximum density juveniles can occur in.\nout_juvenile_indicator : Output array buffer for the juvenile indicator metrics with dimensions [timesteps ⋅ locations]\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.juvenile_indicator-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}, AbstractMatrix{T}, T}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.juvenile_indicator","text":"juvenile_indicator(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, habitable_area::AbstractVector{T}, mean_colony_diameters::AbstractArray{T,2}, max_juv_density::T)::AbstractArray{T,2} where {T<:AbstractFloat}\n\nIndicator for juvenile density (0 - 1) where 1 indicates the maximum theoretical density for juveniles have been achieved. The juvenile indicator is defined as follows.\n\nThe maximum juvenile colony area J_A refers to the maximum mean colony area over all juvenile size classes and all functional groups. Maximum juvenile density J_Drefers to the maximum density juvenile can occur at over all juvenile size classes and functional groups. Then Juvenile Indicator (I) is given as,\n\nbeginalign*\n    I(x J_A J_D H_A) = fracA(x H_A)J_A cdot J_D cdot H_A\nendalign*\n\nwhere H_A refers to habitable area and A(x H_A) refers to absolute juvenile cover.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations]\nis_juvenile : Boolean mask indicating which sizes are juveniles.\nhabitable_area : Available area habitable by coral for each location.\nmean_colony_diameters : Mean colony diameter for each group and size class with dimensions [groups ⋅ size classes]\nmax_juv_density : Maximum juvenile density for all juvenile size classes and functional groups.\n\nReturns\n\nA 2D array of juvenile indicators with dimensions [timesteps ⋅ locations]\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.relative_juveniles!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractMatrix{T}}} where T<:Real","page":"Juvenile Metrics","title":"ADRIAIndicators.relative_juveniles!","text":"relative_juveniles!(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, out_relative_juveniles::AbstractArray{T,2})::Nothing where {T<:Real}\n\nCalculate the relative coral cover composed of juveniles.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : A boolean vector indicating which size classes are juvenile.\nout_relative_juveniles : Output array buffer with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.relative_juveniles-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}}} where T<:Real","page":"Juvenile Metrics","title":"ADRIAIndicators.relative_juveniles","text":"relative_juveniles(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool})::AbstractArray{T,2} where {T<:Real}\n\nCalculate the relative coral cover composed of juveniles.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : A boolean vector indicating which size classes are juvenile.\n\nReturns\n\nA 2D array of relative juvenile cover with dimensions [timesteps ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.relative_loc_taxa_juveniles!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractArray{T, 3}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.relative_loc_taxa_juveniles!","text":"relative_loc_taxa_juveniles!(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool}, location_area::AbstractVector{T}, out_relative_loc_taxa_juveniles::AbstractArray{T,2})::Nothing where {T<:AbstractFloat}\n\nCalculate the relative coral cover copmosed of juveniles over time, functional group and location. Returns the output into a preallocated buffer\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : A boolean vector indicating which size classes are juvenile.\nout_relative_taxa_juveniles : Output array buffer with dimensions [timesteps ⋅ groups ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.relative_loc_taxa_juveniles-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.relative_loc_taxa_juveniles","text":"relative_loc_taxa_juveniles(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractVector{Bool},)::Array{T,3} where {T<:AbstractFloat}\n\nCalculate the relative coral cover composed of juveniles over time, functional group and location.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : A boolean vector indicating which size classes are juvenile.\n\nReturns\n\nArray with dimensions [timesteps ⋅ groups ⋅ locations].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.relative_taxa_juveniles!-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractArray{Bool}, AbstractVector{T}, AbstractMatrix{T}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.relative_taxa_juveniles!","text":"relative_taxa_juveniles!(relative_cover::AbstractArray{T,4}, is_juvenile::AbstractArray{Bool}, location_area::AbstractVector{T}, out_relative_taxa_juveniles::AbstractArray{T,2})::Nothing where {T<:AbstractFloat}\n\nCalculate the relative coral cover composed of juveniles over time and functional group. Returns the output into a preallocated buffer.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : A boolean vector indicating which size classes are juvenile.\nlocation_area : Vector containing the area of each location with dimensions [locations].\nout_relative_taxa_juveniles : Output array buffer with dimensions [timesteps ⋅ groups].\n\n\n\n\n\n","category":"method"},{"location":"juvenile_metrics/#ADRIAIndicators.relative_taxa_juveniles-Union{Tuple{T}, Tuple{AbstractArray{T, 4}, AbstractVector{Bool}, AbstractVector{T}}} where T<:AbstractFloat","page":"Juvenile Metrics","title":"ADRIAIndicators.relative_taxa_juveniles","text":"Calculate the relative coral cover composed of juveniles over time and functional group.\n\nArguments\n\nrelative_cover : Relative cover with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations].\nis_juvenile : A boolean vector indicating which size classes are juvenile.\nlocation_area : Vector containing the area of each location with dimensions [locations].\n\nReturns\n\nArray with dimensions [timesteps ⋅ groups].\n\n\n\n\n\n","category":"method"},{"location":"conversions/#Conversions","page":"Conversions","title":"Conversions","text":"","category":"section"},{"location":"conversions/#ADRIAIndicators.rhc_to_rrc!-Union{Tuple{N}, Tuple{T}, Tuple{Array{T, N}, AbstractVector{T}, AbstractVector{T}, Int64, Array{T, N}}} where {T<:AbstractFloat, N}","page":"Conversions","title":"ADRIAIndicators.rhc_to_rrc!","text":"_rhc_to_rrc!(relative_habitable_cover::Array{T}, habitable_area_m²::AbstractVector{T}, reef_area_m²::AbstractVector{T}, location_dim::Int64, out_rrc::Array{T,N})::Nothing where {T<:AbstractFloat}\n\nConvert relative habitable cover to relative reef cover.\n\nArguments\n\nrelative_reef_cover : Relative reef cover with value in [0, 1]\nhabitable_area_m² : Habitable area of reef.\nreef_area_m² : Area of entire reef.\nlocation_dim : Index of the location dimensions. For example location_dim=3 if the \n\nthird dimension in relative_reef_cover is the location dimensions.\n\nout_rrc : Array buffer of the same shape as relativereefcover\n\n\n\n\n\n","category":"method"},{"location":"conversions/#ADRIAIndicators.rhc_to_rrc-Union{Tuple{T}, Tuple{Array{T}, AbstractVector{T}, AbstractVector{T}, Int64}} where T<:AbstractFloat","page":"Conversions","title":"ADRIAIndicators.rhc_to_rrc","text":"rhc_to_rrc(relative_habitable_cover::Array{T}, habitable_area_m²::AbstractVector{T}, reef_area_m²::AbstractVector{T}, location_dim::Int64)::Array{T} where {T<:AbstractFloat}\n\nConvert relative habitable cover to relative reef cover. The conversion is given by\n\nbeginalign*\ntextRRC = textRHC cdot fracA_HA_R\nendalign*\n\nwhere RRC, RHC, A_H and A_R represent relative reef cover, relative habitable cover habitable area and reef area respectively.\n\nArguments\n\nrelative_reef_cover : Relative reef cover with value in [0, 1]\nhabitable_area_m² : Habitable area of reef.\nreef_area_m² : Area of entire reef.\nlocation_dim : Index of the location dimensions. For example location_dim=3 if the \n\nthird dimension in relative_reef_cover is the location dimsnions.\n\nReturns\n\nRelative reef cover with same array shape as the input relative_reef_cover.\n\n\n\n\n\n","category":"method"},{"location":"conversions/#ADRIAIndicators.rrc_to_rhc!-Union{Tuple{N}, Tuple{T}, Tuple{Array{T, N}, AbstractVector{T}, AbstractVector{T}, Int64, Array{T, N}}} where {T<:AbstractFloat, N}","page":"Conversions","title":"ADRIAIndicators.rrc_to_rhc!","text":"rrc_to_rhc!(relative_reef_cover::Array{T}, habitable_area_m²::AbstractVector{T}, reef_area_m²::AbstractVector{T}, location_dim::Int64, out_rhc::Array{T,N})::Nothing where {T<:AbstractFloat}\n\nConvert relative reef cover to relative habitable cover.\n\nArguments\n\nrelative_reef_cover : Relative reef cover with value in [0, 1]\nhabitable_area_m² : Habitable area of reef.\nreef_area_m² : Area of entire reef.\nlocation_dim : Index of the location dimensions. For example location_dim=3 if the \n\nthird dimension in relative_reef_cover is the location dimsnions.\n\nout_rhc : Array buffer of the same shape as relativereefcover\n\n\n\n\n\n","category":"method"},{"location":"conversions/#ADRIAIndicators.rrc_to_rhc-Union{Tuple{T}, Tuple{Array{T}, AbstractVector{T}, AbstractVector{T}, Int64}} where T<:AbstractFloat","page":"Conversions","title":"ADRIAIndicators.rrc_to_rhc","text":"rrc_to_rhc(relative_reef_cover::Array{T}, habitable_area_m²::AbstractVector{T}, reef_area_m²::AbstractVector{T}, location_dim::Int64)::Array{T} where {T<:AbstractFloat}\n\nConvert relative reef cover to relative habitable cover. The conversion is given by\n\nbeginalign*\ntextRHC = textRRC cdot fracA_RA_H\nendalign*\n\nwhere RRC, RHC, A_H and A_R represenht relative reef cover, relative habitable cover habitable area and reef area respectively.\n\nArguments\n\nrelative_reef_cover : Relative reef cover with value in [0, 1]\nhabitable_area_m² : Habitable area of reef.\nreef_area_m² : Area of entire reef.\nlocation_dim : Index of the location dimensions. For example location_dim=3 if the \n\nthird dimension in relative_reef_cover is the location dimsnions.\n\nReturns\n\nRelative habitable cover with same array shape as the input relative_reef_cover.\n\n\n\n\n\n","category":"method"},{"location":"#ADRIAIndicators.jl","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"","category":"section"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"ADRIAIndicators provides a set of standard metrics for summarizing the state of reef ecological model outputs.","category":"page"},{"location":"#Usage","page":"ADRIAIndicators.jl","title":"Usage","text":"","category":"section"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"Each metric has an option to perform the computation in place for efficiency. The in-place version of a function is denoted by a ! at the end of the function name.","category":"page"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"using ADRIAIndicators: relative_juveniles, relative_juveniles!\n\n# Raw model coral cover outputs with dimensions [timesteps ⋅ groups ⋅ sizes ⋅ locations]\nraw_model_cover::Array{T,4} = ...\n# Juveniles mask with dimensions [sizes]\nis_juvenile::Vector{Bool} = ...\nn_timesteps, _, _, n_locations = size(raw_model_cover)\n\n# Calculate and allocate new array for metric\nrel_juveniles = relative_juveniles(raw_model_cover, is_juvenile)\n\n# Perform the computation inplace.\nrel_juveniles_out = zeros(Float64, n_timesteps, n_locations)\nrelative_juveniles!(raw_model_cover, is_juvenile, rel_juveniles_out)","category":"page"},{"location":"#Available-Metrics","page":"ADRIAIndicators.jl","title":"Available Metrics","text":"","category":"section"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"Relative/Absolute Cover\nRelative/Absolute Shelter Volume\nRelative/Absolute Juveniles\nJuvenile Indicator\nCoral Diversity\nCoral Evenness\nReef Indices","category":"page"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"To Do: Reef Condition Index","category":"page"},{"location":"#Building-Documentation","page":"ADRIAIndicators.jl","title":"Building Documentation","text":"","category":"section"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"The documentation is not currently hosted online but can be built locally.","category":"page"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"First, ensure you have the project dependencies installed:","category":"page"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"cd docs\njulia --project=. -e 'using Pkg; Pkg.instantiate()'","category":"page"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"Then, build the documentation:","category":"page"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"julia --project=. make.jl","category":"page"},{"location":"","page":"ADRIAIndicators.jl","title":"ADRIAIndicators.jl","text":"Finally, open index.html in the docs/build directory to view the documentation.","category":"page"}]
}
